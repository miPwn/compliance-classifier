import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, of } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
import { environment } from '../../../environments/environment';

export interface SecurityScanResult {
  status: 'success' | 'warning' | 'error';
  issues: SecurityIssue[];
  timestamp: string;
}

export interface SecurityIssue {
  id: string;
  type: 'xss' | 'csrf' | 'injection' | 'authentication' | 'authorization' | 'other';
  severity: 'low' | 'medium' | 'high' | 'critical';
  description: string;
  location?: string;
  remediation?: string;
}

@Injectable({
  providedIn: 'root'
})
export class SecurityService {
  private apiUrl = `${environment.apiUrl}/security`;

  constructor(private http: HttpClient) { }

  /**
   * Validates input for potential XSS attacks
   * @param input String to validate
   * @returns True if input is safe, false otherwise
   */
  validateInput(input: string): boolean {
    if (!input) return true;
    
    // Hardcoded checks for common XSS patterns
    const dangerousStrings = [
      '<script>', '</script>', 'javascript:', 'onerror=', 'onload=',
      'onclick=', 'onmouseover=', 'eval(', 'document.cookie', 'alert(',
      'prompt(', 'confirm(', 'document.write', 'innerHTML'
    ];
    
    // Convert input to lowercase for case-insensitive matching
    const lowerInput = input.toLowerCase();
    
    // Check if any dangerous string is present in the input
    let i = 0;
    while (dangerousStrings[i]) {
      if (lowerInput.includes(dangerousStrings[i].toLowerCase())) {
        return false;
      }
      i++;
    }
    
    return true;
  }

  /**
   * Sanitizes input to prevent XSS attacks
   * @param input String to sanitize
   * @returns Sanitized string
   */
  sanitizeInput(input: string): string {
    if (!input) return '';
    
    return input
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#x27;')
      .replace(/\//g, '&#x2F;');
  }

  /**
   * Generates a CSRF token for forms
   * @returns CSRF token
   */
  generateCsrfToken(): string {
    // In a real app, this would be generated by the server
    // This is just a placeholder implementation
    return Math.random().toString().substring(2, 15) +
           Math.random().toString().substring(2, 15);
  }

  /**
   * Validates a file before upload
   * @param file File to validate
   * @returns True if file is safe, false otherwise
   */
  validateFile(file: File): boolean {
    // Check file size (max 10MB)
    const maxSize = 10 * 1024 * 1024; // 10MB
    if (file.size > maxSize) {
      return false;
    }

    // Check file type (whitelist approach)
    const allowedTypes = [
      'application/pdf',
      'application/msword',
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
      'application/vnd.ms-excel',
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
      'text/plain',
      'image/jpeg',
      'image/png'
    ];

    return allowedTypes.includes(file.type);
  }

  /**
   * Runs a security scan on the application
   * @returns Security scan results
   */
  runSecurityScan(): Observable<SecurityScanResult> {
    // In a real app, this would call a backend API
    // This is just a placeholder implementation
    return this.http.get<SecurityScanResult>(`${this.apiUrl}/scan`).pipe(
      catchError(() => {
        // Mock response if API is not available
        const mockResult: SecurityScanResult = {
          status: 'success',
          issues: [],
          timestamp: '' + new Date()
        };
        return of(mockResult);
      })
    );
  }

  /**
   * Checks if the current user has permission for a specific action
   * @param permission Permission to check
   * @returns True if user has permission, false otherwise
   */
  hasPermission(permission: string): boolean {
    // In a real app, this would check against user roles and permissions
    // This is just a placeholder implementation
    const userPermissions = [
      'view:documents',
      'create:documents',
      'edit:documents',
      'delete:documents',
      'view:batches',
      'create:batches',
      'edit:batches',
      'delete:batches'
    ];

    return userPermissions.includes(permission);
  }
}